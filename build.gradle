buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'maven-publish'

group = 'dev.buildtool'
version = '0.0.1-1.18.2'

java {
    archivesBaseName = 'block-relocation'
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

minecraft {

    mappings channel: 'official', version: '1.18.2'

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/removed as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', ''

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'info'

            property 'forge.enabledGameTestNamespaces', 'block_relocation'

            mods {
                blockrelocation {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('server')

            property 'forge.logging.markers', ''

            property 'forge.logging.console.level', 'info'

            property 'forge.enabledGameTestNamespaces', 'block_relocation'

            mods {
                blockrelocation {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', 'block_relocation'

            mods {
                blockrelocation {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('dat')

            property 'forge.logging.markers', ''

            property 'forge.logging.console.level', 'info'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'blockrelocation', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                blockrelocation {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    mavenLocal()
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.18.2-40.1.25'
    implementation(fg.deobf("dev.buildtool:satako:5.0.4-1.18.2"))
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : "block_relocation",
                "Specification-Vendor"    : "Alexiy",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "Alexiy",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

task("sourceJar", type: Jar, group: "build") {
    getArchiveClassifier().set("sources")
    from sourceSets.main.allSource
}

task("apiJar", type: Jar, group: "build") {
    getArchiveClassifier().set("api")
    from sourceSets.main.allSource
    from sourceSets.main.output
    include("dev/buildtool/blockrelocation/api/**")
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
            artifact sourceJar
            artifact apiJar
        }
    }
}